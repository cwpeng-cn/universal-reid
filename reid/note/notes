
# 常见的transform
train_transform = transforms.Compose([
    transforms.Random2DTranslation(256, 128),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])
train_loader = data_loader.market_get_loader(image_path=train_image_path,
                                             transform=train_transform, num_workers=0, use_onehot=False)
test_transform = transforms.Compose([
    transforms.Resize((256, 128)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])
query_loader = data_loader.market_get_loader(image_path=query_path, transform=test_transform, num_workers=0,model='test',
                                             use_onehot=False)
gallery_loader = data_loader.market_get_loader(image_path=gallery_path,model='test',
                                               transform=test_transform, num_workers=0, use_onehot=False)


# 常见的优化器
loss = nn.CrossEntropyLoss()
ignored_params = list(map(id, net.embed_layer.parameters())) + list(map(id, net.last_fc.parameters()))
base_params = filter(lambda p: id(p) not in ignored_params, net.parameters())
optimizer = optim.SGD([
    {'params': base_params, 'lr': 0.01},
    {'params': net.embed_layer.parameters(), 'lr': 0.1},
    {'params': net.last_fc.parameters(), 'lr': 0.1}
], momentum=0.9, weight_decay=5e-4, nesterov=True)
exp_lr_scheduler = lr_scheduler.StepLR(optimizer, step_size=40, gamma=0.1)



transform_train_list = [
        #transforms.RandomResizedCrop(size=128, scale=(0.75,1.0), ratio=(0.75,1.3333), interpolation=3), #Image.BICUBIC)
        transforms.Resize((256,128), interpolation=3),
        transforms.Pad(10),
        transforms.RandomCrop((256,128)),
        transforms.RandomHorizontalFlip(),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]

transform_val_list = [
        transforms.Resize(size=(256,128),interpolation=3), #Image.BICUBIC
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]


'--lr', default=0.05


'--batchsize', default=32, type=int, help='


if opt.color_jitter:
    transform_train_list = [transforms.ColorJitter(brightness=0.1, contrast=0.1, saturation=0.1, hue=0)] + transform_train_list